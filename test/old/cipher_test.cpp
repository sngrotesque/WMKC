#include <crypto/crypto.hpp>
#include <wmkc_misc.hpp>

using namespace std;

#define NR 16
#define BLOCK_SIZE 16

static const wmkcByte sbox[256] = {
    0x8b, 0x94, 0xe2, 0x3c, 0x6b, 0xb3, 0x2b, 0x22, 0x1b, 0x75, 0x1c, 0x5b, 0x79, 0xa6, 0x2d, 0x5c,
    0x45, 0xbd, 0x97, 0x9f, 0x12, 0x8d, 0x34, 0x40, 0x55, 0xe3, 0x5f, 0xd5, 0x1e, 0x33, 0xed, 0x06,
    0x57, 0x9c, 0x70, 0xc9, 0x92, 0xe8, 0x3d, 0x0e, 0x46, 0x3a, 0x03, 0x6e, 0xf3, 0xf8, 0x6a, 0x85,
    0xf7, 0x81, 0xbb, 0x72, 0x53, 0xb5, 0x78, 0xb4, 0x5a, 0x66, 0xa3, 0xc8, 0xcf, 0x21, 0x4a, 0xa1,
    0xae, 0x96, 0x2a, 0xa2, 0x39, 0x71, 0xdd, 0x3f, 0xc3, 0xec, 0x6d, 0x7d, 0x5e, 0x65, 0x32, 0x7b,
    0xbc, 0x02, 0x8c, 0x7f, 0xb0, 0xea, 0x29, 0xa9, 0x48, 0x90, 0x01, 0x41, 0xfc, 0x19, 0x47, 0x83,
    0xd2, 0x8e, 0x37, 0x20, 0xd8, 0x30, 0xb2, 0xf0, 0x4f, 0x51, 0x23, 0xe9, 0xeb, 0x38, 0x73, 0xb1,
    0xc7, 0x08, 0xde, 0xef, 0x3e, 0x8a, 0x52, 0x27, 0xda, 0x42, 0xee, 0x76, 0x93, 0xc0, 0xd4, 0x07,
    0x80, 0x00, 0x2f, 0xf2, 0xcb, 0x24, 0x61, 0x9a, 0xdb, 0x69, 0xad, 0x0f, 0x74, 0xf6, 0x43, 0x63,
    0xb7, 0xa5, 0x64, 0x4c, 0x9d, 0xba, 0x88, 0xbf, 0xe1, 0x58, 0x18, 0x89, 0x59, 0xb9, 0xff, 0x09,
    0x4e, 0x2c, 0xcc, 0x68, 0xd3, 0x17, 0xe6, 0x99, 0x67, 0x50, 0x13, 0x1f, 0x4d, 0xd1, 0x7a, 0xa4,
    0xfd, 0x98, 0xc1, 0x35, 0xe4, 0xce, 0xf5, 0x05, 0x3b, 0x14, 0x11, 0x4b, 0x1d, 0xb8, 0x9e, 0x9b,
    0xdc, 0xe5, 0x91, 0xfb, 0x15, 0xd6, 0xaa, 0x25, 0xa7, 0xa8, 0x0a, 0x5d, 0xfa, 0x6f, 0x28, 0xf4,
    0x04, 0x44, 0xab, 0xbe, 0x6c, 0xfe, 0x62, 0xdf, 0x7e, 0x60, 0x95, 0x26, 0x54, 0xa0, 0xc6, 0xe7,
    0x84, 0xd7, 0x86, 0x2e, 0xac, 0x36, 0x0c, 0x0d, 0xc5, 0x31, 0x82, 0xe0, 0x49, 0xc2, 0x1a, 0x56,
    0x0b, 0xcd, 0x10, 0xb6, 0xca, 0x77, 0xaf, 0x87, 0x7c, 0x16, 0xc4, 0xd9, 0x8f, 0xf1, 0xd0, 0xf9};

#define SHIFT_BITS_L(x) (((x >> 5) | (x << 3)) & 0xff)

void subBytes(wmkcByte *block)
{
    for(wmkc_u32 i = 0; i < BLOCK_SIZE; ++i) {
        block[i] = sbox[block[i]];
    }
}

void shiftBits(wmkcByte *block)
{
    for(wmkc_u32 i = 0; i < BLOCK_SIZE; ++i) {
        block[i] = SHIFT_BITS_L(block[i]);
    }
}

void shiftRows(wmkcByte *block)
{
    wmkcByte tmp[8];
    memcpy(tmp, block, 8);
    memcpy(block, block + 8, 8);
    memcpy(block + 8, tmp, 8);
    for(wmkc_u32 i = 0; i < (BLOCK_SIZE >> 1); ++i) {
        block[i] ^= block[8];
        block[i] ^= block[9];
        block[i] ^= block[10];
        block[i] ^= block[11];
        block[i] ^= block[12];
        block[i] ^= block[13];
        block[i] ^= block[14];
        block[i] ^= block[15];
    }
}

void cipher(wmkcByte *block, wmkcByte *roundKey)
{
    wmkc_u32 r, i;
    wmkcByte *subkey = wmkcNull;
    for(r = 0; r < NR; ++r) {
        subBytes(block);
        subkey = roundKey + (r << 4); // roundKey + r * 32
        for(i = 0; i < BLOCK_SIZE; ++i) {
            *(block + i) ^= *(subkey + (i & 15)); // subKey[i % 32]
        }
        shiftRows(block);
        shiftBits(block);
    }
}

int main()
{
    wmkcChar _tmp[32] = {"hello, world./.."};
    wmkcChar _key[512] = {"ONo&{A&Jfr.o!V0K*J)eLuv4[Mgn}g&#$b]Wnc*{kqi}zlw8oHk!7~BuWceVU9&),CgK.WPkU,8-cvMVHNmVGWYl6or)k-D5~b3u{O4m(3**VAYmMb32y1yhwU2e5~&QdEPZqbM0&Izq2,oX$njeo*#MS-}083EZ5SRop{Ia/vvv#eQ4[.&cKD,U&wORYToTq}yBOw}(V)s6w8qq)fb#nIT8MY&Cpeyz,ssRkMFr-5L&e36o#2drMsQ%]y%]EF}J"};
    wmkcByte *data = (wmkcByte *)_tmp;
    wmkcByte *key  = (wmkcByte *)_key;

    printf("Plaintext:\n"); wmkcMisc::PRINT(data, 16, 16, 1, 1);

    cipher(data, key);

    printf("Ciphertext:\n"); wmkcMisc::PRINT(data, 16, 16, 1, 1);

    return 0;
}
